name: Release Lambda layer

on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to tag the lambda release with (should be the same as the current ADOT JavaScript SDK version, e.g., 0.6.0)
        required: true
      aws_region:
        description: 'Deploy to aws regions'
        required: true
        default: 'us-east-1, us-east-2, us-west-1, us-west-2, ap-south-1, ap-northeast-3, ap-northeast-2, ap-southeast-1, ap-southeast-2, ap-northeast-1, ca-central-1, eu-central-1, eu-west-1, eu-west-2, eu-west-3, eu-north-1, sa-east-1, af-south-1, ap-east-1, ap-south-2, ap-southeast-3, ap-southeast-4, eu-central-2, eu-south-1, eu-south-2, il-central-1, me-central-1, me-south-1, ap-southeast-5, ap-southeast-7, mx-central-1, ca-west-1, cn-north-1, cn-northwest-1'

env:
  AWS_REGIONS: ${{ github.event.inputs.aws_region }}
  COMMERCIAL_REGIONS: us-east-1, us-east-2, us-west-1, us-west-2, ap-south-1, ap-northeast-3, ap-northeast-2, ap-southeast-1, ap-southeast-2, ap-northeast-1, ca-central-1, eu-central-1, eu-west-1, eu-west-2, eu-west-3, eu-north-1, sa-east-1, ap-southeast-5, ap-southeast-7, mx-central-1, ca-west-1, cn-north-1, cn-northwest-1
  LAYER_NAME: AWSOpenTelemetryDistroJs

permissions:
  id-token: write
  contents: write

jobs:
  check-draft:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check for release draft
        run: |
          TAG="v${{ github.event.inputs.version }}"
          # Check if draft release exists with this tag
          if ! gh release view $TAG --json isDraft -q .isDraft 2>/dev/null | grep -q true; then
            echo "No draft release found for tag $TAG. Did you first run the Release Build workflow?"
            exit 1
          fi
          echo "Found draft release for tag $TAG. Proceeding with Lambda layer release."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-layer:
    runs-on: ubuntu-latest
    needs: check-draft
    outputs:
      aws_regions_json: ${{ steps.set-matrix.outputs.aws_regions_json }}
    steps:
      - name: Set up regions matrix
        id: set-matrix
        run: |
          IFS=',' read -ra REGIONS <<< "${{ env.AWS_REGIONS }}"
          MATRIX="["
          for region in "${REGIONS[@]}"; do
            trimmed_region=$(echo "$region" | xargs)
            MATRIX+="\"$trimmed_region\","
          done
          MATRIX="${MATRIX%,}]"
          echo ${MATRIX}
          echo "aws_regions_json=${MATRIX}" >> $GITHUB_OUTPUT
      - name: Checkout Repo @ SHA - ${{ github.sha }}
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: NPM Clean Install
        # https://docs.npmjs.com/cli/v10/commands/npm-ci
        run: npm ci
      - name: Compile all NPM projects
        run: npm run compile
      - name: Build Lambda Layer
        run: npm run build-lambda
      - name: upload layer
        uses: actions/upload-artifact@v4
        with:
          name: layer.zip
          path: lambda-layer/packages/layer/build/layer.zip
  generate-release-note:
    runs-on: ubuntu-latest
    needs: build-layer
    steps:
      - name: Checkout Repo @ SHA - ${{ github.sha }}
        uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
      - name: Generate fake layer ARNs
        run: |
          mkdir -p ${{ env.LAYER_NAME }}
          IFS=',' read -ra REGIONS <<< "${{ env.AWS_REGIONS }}"
          for region in "${REGIONS[@]}"; do
            trimmed_region=$(echo "$region" | xargs)
            echo "arn:aws:lambda:$trimmed_region:123456789012:layer:${{ env.LAYER_NAME }}:999" > ${{ env.LAYER_NAME }}/$trimmed_region
          done
      
      - name: show layerARNs
        run: |
          for file in ${{ env.LAYER_NAME }}/*
          do
          echo $file
          cat $file
          done
      - name: generate layer-note
        working-directory: ${{ env.LAYER_NAME }}
        run: |
          echo "| Region | Layer ARN |" >> ../layer-note
          echo "|  ----  | ----  |" >> ../layer-note
          for file in *
          do
          read arn < $file
          echo "| " $file " | " $arn " |" >> ../layer-note
          done
          cd ..
          cat layer-note
      - name: generate tf layer
        working-directory: ${{ env.LAYER_NAME }}
        run: |
          echo "locals {" >> ../layer_arns.tf
          echo "  sdk_layer_arns = {" >> ../layer_arns.tf
          for file in *
          do
          read arn < $file
          echo "    \""$file"\" = \""$arn"\"" >> ../layer_arns.tf
          done
          cd ..
          echo "  }" >> layer_arns.tf
          echo "}" >> layer_arns.tf
          terraform fmt layer_arns.tf
          cat layer_arns.tf
      - name: generate layer ARN constants for CDK
        working-directory: ${{ env.LAYER_NAME }}
        run: |
          echo "{" > ../layer_cdk
          for file in *; do
            read arn < "$file"
            echo "    \"$file\": \"$arn\"," >> ../layer_cdk
          done
          echo "}" >> ../layer_cdk
          cat ../layer_cdk
      - name: download layer.zip
        uses: actions/download-artifact@v4
        with:
          name: layer.zip
      - name: Get commit hash
        id: commit
        run: |
          echo "sha_short=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
      - name: Update GH release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v${{ github.event.inputs.version }}"
          # Generate SHA-256 checksum for layer.zip
          shasum -a 256 layer.zip > layer.zip.sha256
          gh release upload $TAG \
            layer.zip \
            layer.zip.sha256 \
            layer_arns.tf \
            --clobber
      - name: Update Release Notes
        run: |
          TAG="v${{ github.event.inputs.version }}"
          # Get current release notes
          current_notes=$(gh release view $TAG --json body -q .body)
          echo "## Lambda Layer" > lambda_notes.md
          echo "" >> lambda_notes.md
          echo "AWS OpenTelemetry Lambda Layer for JavaScript version ${{ github.event.inputs.version }}-${{ steps.commit.outputs.sha_short }}" > lambda_notes.md
          echo "" >> lambda_notes.md
          echo "Lambda Layer ARNs:" >> lambda_notes.md
          echo "" >> lambda_notes.md
          cat layer-note >> lambda_notes.md
          echo "" >> lambda_notes.md
          echo "Notes:" >> lambda_notes.md
          {
            echo "$current_notes"
            echo ""
            cat lambda_notes.md
          } > updated_notes.md
          # Update release notes
          gh release edit $TAG --notes-file updated_notes.md